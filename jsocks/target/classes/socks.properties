#SOCKS server initialisation file.


#Port on which the socks server should run
#If not set deafults to 1080
port = 1080

#Timeout settings for the SOCKS server,in milliseconds.
#If not defined, all default to 3 minutes(18000ms).
#
# iddleTimeout  If no data received from/to user during this interval
#               connection will be aborted.
# acceptTimeout If no connection is accepted during this interval,
#               connection will be aborted.
# udpTimeout    If no datagrams are received from/to user, in this interval
#               UDP relay server stops, and control connection is closed.
# Any of these can be 0, implying infinit timeout, that is once the
# connection is made, it is kept alive until one of the parties closes it.
# In case of the BIND command, it implies that server will be listenning
# for incoming connection until it is accepted, or until client closes
# control connection.
# For UDP servers it implies, that they will run as long, as client
# keeps control connection open.

iddleTimeout    = 600000   # 10 minutes
acceptTimeout   = 60000    # 1 minute
udpTimeout      = 600000   # 10 minutes

#datagramSize -- Size of the datagrams to use for udp relaying.
#Defaults to 64K bytes(0xFFFF = 65535 a bit more than maximum possible size).
#datagramSize = 8192

#log -- Name of the file, to which logging should be done
#       If log is - (minus sine) do logging to standart output.
#Optional field, if not defined, no logging is done.
#

#log = -

#host -- Host on which to run, for multihomed hosts,
#        Default -- all(system dependent)
#host = some.hostOfMine.com

#range -- Semicolon(;) separated range of addresses, from which
#connections should be accepted.
#
# Range could be one of those
#   1. Stand alone host name -- some.host.com or 33.33.44.101
#   2. Host range
#          .my.domain.net
#          190.220.34.
#          host1:host2
#          33.44.100:33.44.200
#
# Example: .myDomain.com;100.220.30.;myHome.host.com;\
#          comp1.myWork.com:comp10.myWork.com
#
# This will include all computers in the domain myDomain.com,
# all computers whose addresses start with 100.200.30,
# host with the name myHome.host.com,
# and computers comp1 through to comp2 in the domain myWork.com,
# assuming their names correspond to there ip addresses.
#
# NOTE: Dot(.) by itself implies all hosts, be sure not to include
#       one of those.
  

range = localhost;130.220.

#users
# Semicolon(;) separated list of users, for whom permissions should be
# granted, given they connect from one of the hosts speciefied by range.
# This field is optional, if not defined, ANY user will be allowed to use
# SOCKS server, given he\she is connecting from one of the hosts in the
# range.
# NOTE:  Whitespaces are not ignored (except for the first name, it's how java
#                                    parses Property files).
#        User names are CASESenSitive.
#        You have been warned.
# NOTE2: Misspelling users with Users, or anything, will be understood as
#        if users were not defined, and hence will imply that ANYBODY, will
#        be granted access from the hosts in the range.
#

users = kirillka;cis-dude;root

# Proxy configurations, that is what proxy this proxy should use, if any.
# proxy should be a semicolon(;) separated list of proxy entries.
# Each entry shoud be in the form: host[:port:user:password].
# If only host is supplied SOCKSv5 proxy is assumed, running on port 1080.
# If user is supplied,  but password not supplied, SOCKSv4 is assumed, 
# running oon machine 'host' on port 'port', user name will be supplied as
# authentication for that proxy.
# If both user and password is supplied, SOCKSv5 proxy is assumed, with
# user/password authentication.
#
# directHosts should contain ;-separated list of inetaddress and ranges.
#             These machines will be addressed directly rather than through
#             the proxy. See range for more details, what sort of entries
#             permitted and understood.



proxy = www-proxy:1080
directHosts = 130.220.;.unisa.edu.au;localhost
