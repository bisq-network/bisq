/*
 * This file is part of Bisq.
 *
 * Bisq is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or (at
 * your option) any later version.
 *
 * Bisq is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public
 * License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with Bisq. If not, see <http://www.gnu.org/licenses/>.
 */

syntax = "proto3";
package io.bisq.protobuffer;

import "pb.proto";

option java_package = "bisq.proto.grpc";
option java_multiple_files = true;

///////////////////////////////////////////////////////////////////////////////////////////
// DisputeAgents
///////////////////////////////////////////////////////////////////////////////////////////

service DisputeAgents {
    rpc RegisterDisputeAgent (RegisterDisputeAgentRequest) returns (RegisterDisputeAgentReply) {
    }
}

message RegisterDisputeAgentRequest {
    string disputeAgentType = 1;
    string registrationKey = 2;
}

message RegisterDisputeAgentReply {
}

///////////////////////////////////////////////////////////////////////////////////////////
// Offers
///////////////////////////////////////////////////////////////////////////////////////////

service Offers {
    rpc GetOffers (GetOffersRequest) returns (GetOffersReply) {
    }
    rpc CreateOffer (CreateOfferRequest) returns (CreateOfferReply) {
    }
}

message GetOffersRequest {
    string direction = 1;
    string fiatCurrencyCode = 2;
}

message GetOffersReply {
    repeated OfferInfo offers = 1;
}

message CreateOfferRequest {
    string currencyCode = 1; // TODO switch order w/ direction field in next PR
    string direction = 2;
    uint64 price = 3;
    bool useMarketBasedPrice = 4;
    double marketPriceMargin = 5;
    uint64 amount = 6;
    uint64 minAmount = 7;
    double buyerSecurityDeposit = 8;
    string paymentAccountId = 9;
}

message CreateOfferReply {
    bool result = 1;
}

message OfferInfo {
    string id = 1;
    string direction = 2;
    uint64 price = 3;
    bool useMarketBasedPrice = 4;
    double marketPriceMargin = 5;
    uint64 amount = 6;
    uint64 minAmount = 7;
    uint64 volume = 8;
    uint64 minVolume = 9;
    uint64 buyerSecurityDeposit = 10;
    string paymentAccountId = 11; // only used when creating offer
    string paymentMethodId = 12;
    string paymentMethodShortName = 13;
    string baseCurrencyCode = 14;
    string counterCurrencyCode = 15;
    uint64 date = 16;
}

///////////////////////////////////////////////////////////////////////////////////////////
// PaymentAccounts
///////////////////////////////////////////////////////////////////////////////////////////

service PaymentAccounts {
    rpc CreatePaymentAccount (CreatePaymentAccountRequest) returns (CreatePaymentAccountReply) {
    }
    rpc GetPaymentAccounts (GetPaymentAccountsRequest) returns (GetPaymentAccountsReply) {
    }
}

message CreatePaymentAccountRequest {
    string accountName = 1;
    string accountNumber = 2;
    string fiatCurrencyCode = 3;
}

message CreatePaymentAccountReply {
}

message GetPaymentAccountsRequest {
}

message GetPaymentAccountsReply {
    repeated PaymentAccount paymentAccounts = 1;
}

///////////////////////////////////////////////////////////////////////////////////////////
// TradeStatistics
///////////////////////////////////////////////////////////////////////////////////////////

service GetTradeStatistics {
    rpc GetTradeStatistics (GetTradeStatisticsRequest) returns (GetTradeStatisticsReply) {
    }
}

message GetTradeStatisticsRequest {
}

message GetTradeStatisticsReply {
    repeated TradeStatistics2 TradeStatistics = 1;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Wallets
///////////////////////////////////////////////////////////////////////////////////////////

service Wallets {
    rpc GetBalance (GetBalanceRequest) returns (GetBalanceReply) {
    }
    rpc GetAddressBalance (GetAddressBalanceRequest) returns (GetAddressBalanceReply) {
    }
    rpc GetFundingAddresses (GetFundingAddressesRequest) returns (GetFundingAddressesReply) {
    }
    rpc SetWalletPassword (SetWalletPasswordRequest) returns (SetWalletPasswordReply) {
    }
    rpc RemoveWalletPassword (RemoveWalletPasswordRequest) returns (RemoveWalletPasswordReply) {
    }
    rpc LockWallet (LockWalletRequest) returns (LockWalletReply) {
    }
    rpc UnlockWallet (UnlockWalletRequest) returns (UnlockWalletReply) {
    }
}

message GetBalanceRequest {
}

message GetBalanceReply {
    uint64 balance = 1;
}

message GetAddressBalanceRequest {
    string address = 1;
}

message GetAddressBalanceReply {
    AddressBalanceInfo addressBalanceInfo = 1;
}

message GetFundingAddressesRequest {
}

message GetFundingAddressesReply {
    repeated AddressBalanceInfo addressBalanceInfo = 1;
}

message SetWalletPasswordRequest {
    string password = 1;
    string newPassword = 2;
}

message SetWalletPasswordReply {
}

message RemoveWalletPasswordRequest {
    string password = 1;
}

message RemoveWalletPasswordReply {
}

message LockWalletRequest {
}

message LockWalletReply {
}

message UnlockWalletRequest {
    string password = 1;
    uint64 timeout = 2;
}

message UnlockWalletReply {
}

message AddressBalanceInfo {
    string address = 1;
    int64 balance = 2;
    int64 numConfirmations = 3;
}

///////////////////////////////////////////////////////////////////////////////////////////
// Version
///////////////////////////////////////////////////////////////////////////////////////////

service GetVersion {
    rpc GetVersion (GetVersionRequest) returns (GetVersionReply) {
    }
}

message GetVersionRequest {
}

message GetVersionReply {
    string version = 1;
}

